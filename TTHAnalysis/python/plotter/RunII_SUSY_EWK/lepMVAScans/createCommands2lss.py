import os
base = "python makeShapeCardsSusy.py RunII_SUSY_EWK/2016/2lss/mca_ewkino_v5.txt RunII_SUSY_EWK/2016/2lss/cuts_2lss.txt 'SR_ewk_ss2l_v6_plot(mt2davis(LepGood_pt[0], LepGood_eta[0],LepGood_phi[0], LepGood_pt[1], LepGood_eta[1],LepGood_phi[1], MET_pt_nom, MET_phi_nom), MET_pt, LepGood_pt[0]+LepGood_pt[1], pt_2(LepGood_conePt[0], LepGood_phi[0], LepGood_conePt[1], LepGood_phi[1]), min(mt_2(LepGood_conePt[0],LepGood_phi[0],MET_pt_nom,MET_phi_nom),mt_2(LepGood_conePt[1],LepGood_phi[1],MET_pt_nom,MET_phi_nom)),LepGood_charge[0])' '20,0.5,20.5' RunII_SUSY_EWK/systs/systs_wz16.txt --tree treeProducerSusyMultilepton -P /pool/ciencias/HeppyTrees/RA7/nanoAODv5_2016_estructure/ -P /pool/ciencias/HeppyTrees/RA7/nanoAODv5_2016_signals/ --FFasts {P}/puWeight/ --FFulls {P}/leptonPtCorrections/ --FMCs {P}/trigger_prefiring/ --Fs {P}/leptonJetReCleanerWZSM/ --Fs {P}/leptonBuilderEWK/ --Fs {P}/trigger_2016/  --FMCs {P}/leptonMatcher/ --FMCs {P}/bTagEventWeights/ -L RunII_SM_WZ/functionsWZ.cc -L RunII_SM_WZ/functionsSF.cc -L RunII_SM_WZ/functionsMCMatch.cc  --plotgroup data_fakes+=.*promptsub.* --neglist .*promptsub.* -L RunII_SUSY_EWK/functionsEWKcorr.cc --neg -W 'puWeight*($MC{bTagWeightDeepCSVT_nom} $FASTSIM{bTagWeightDeepCSVT})*weight_PrefiringJets*weight_PrefiringPhotons*(getLeptonSF_v4(0,0,2016,LepSel_pt[0],LepSel_eta[0],LepSel_pdgId[0])*getLeptonSF_v4(0,0,2016,LepSel_pt[1],LepSel_eta[1],LepSel_pdgId[1]))' --obj Events -j 8 -f  -l 35.9  -E SR2lss -p prompt.* -p conv.*  -p sig_TChiSlep.*0p05_600_1.* -p sig_TChiSlep.*0p05_400_300.* -p sig_TChiSlep.*0p05_300_250.*  -p fakes.* -p flip.* -X SRevent -A  alwaystrue lepMVA 'allTight(LepGood_mvaTTH[iL_Mini[0]],LepGood_mvaTTH[iL_Mini[1]],1.,LepGood_pdgId[iL_Mini[0]],LepGood_pdgId[iL_Mini[1]],11, [CUT1],[CUT2])' -o mvael[TAG1]mvamu[TAG2] --od testleptonMVA16_2lss --asimov"

for i in range(20):
  for j in range(20):
    x = -1. + 0.1*i
    y = -1. + 0.1*j
    #print base.replace("[CUT1]", str(x)).replace("[CUT2]", str(y)).replace("[TAG1]", str(x).replace("-","m")).replace("[TAG2]", str(x).replace("-","m"))
    #os.system("sbatch -c 8 -p batch -J" + " --wrap \"" + base.replace("[CUT1]", str(x)).replace("[CUT2]", str(y)).replace("[TAG1]", str(x).replace("-","m")).replace("[TAG2]", str(x).replace("-","m")) + "\"")
    print "sbatch -c 8 -p batch " + " --wrap \"" + base.replace("[CUT1]", str(x)).replace("[CUT2]", str(y)).replace("[TAG1]", str(x).replace("-","m")).replace("[TAG2]", str(y).replace("-","m")).replace("$","\$") + "\""
